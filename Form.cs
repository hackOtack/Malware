using System.Reflection.Metadata.Ecma335;
using System.Diagnostics;
using System.Threading.Channels;
using System;

namespace BinaryLoader
{
    public partial class Form1 : Form
    {


        public void parseValue(string binaryPath, int rva, string funcDef, bool shouldDump)
        {


            string arguments = "arg1 arg2 arg3"; // Construct the arguments based on user input
            string cppAppPath = "LibPeLoader.exe"; // Path to your C++ application


            // Convert the integer to a string
            string rvaStr = rva.ToString();

            // Convert the boolean to a string (e.g., "1" for true, "0" for false)
            string shouldDumpStr = shouldDump ? "1" : "0";


            // Concatenate the strings to form the arguments
            // arguments = binaryPath + " " + rvaStr + " " + funcDef + " " + shouldDumpStr;
            arguments = binaryPath;
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = cppAppPath,
                Arguments = arguments,
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (Process process = new Process())
            {
                process.StartInfo = startInfo;
                process.Start();
                string result = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                // Display the output in the GUI or perform other actions
                output.Text = result;
            }

            return;
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void maskedTextBox1_MaskInputRejected(object sender, MaskInputRejectedEventArgs e)
        {

        }


        private void button1_Click_1(object sender, EventArgs e)
        {

            string funcDef = textBox1.Text;

            string binaryPath = textBox2.Text;

            string hexValue = maskedTextBox1.Text; // Get the text from the MaskedTextBox

            int funcRVA = 0;
            // Attempt to parse the hex value
            if (!int.TryParse(hexValue, System.Globalization.NumberStyles.HexNumber, null, out int parsedValue))
            {
                MessageBox.Show("Invalid Function RVA");
            }
            else
            {
                funcRVA = parsedValue;
            }


            // Run LibPE util to get the results 
            bool dumpBinary = checkBox1.Checked;

            parseValue(binaryPath, funcRVA, funcDef, dumpBinary);


        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(textBox1.Text))
            {
                // Set a default value
                textBox1.Text = "\"int basic_main(void);\"";
            }


        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void output_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(textBox2.Text))
            {
                MessageBox.Show("Path to the binary is required!");
            }
        }
    }
}
