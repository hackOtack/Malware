# Based on 68af250429833d0b15d44052637caec2afbe18169fee084ee0ef4330661cce9c  
# string_decoder function @ 64AC

import idautils
import idc

def decode_string(bytes):
	v2 = len(bytes)
	String2 = [0 for x in range(255)]
	size = 0
	for i in range(0, v2):
		if (bytes[i + 5] ==0):
			String2[i] = 0
			break
		size+=1
		String2[i] = bytes[i + 5] - i - 1
	String2 = String2[:size]	
	return bytearray(String2).decode("utf-8") 

def comment(addr, decoded):
    set_cmt(addr, decoded, 0)
    
wf_addr = idc.get_name_ea_simple("string_decoder")
for addr_call in idautils.CodeRefsTo(wf_addr, 0):
    prev = prev_head(addr_call, minea=0) #prev instruction address
    prev_p = prev_head(prev, minea=0)
    print("processing xref at: ", hex(addr_call))
    bytes = []
    while(idc.get_operand_type(prev_p, 0)== 4):
        byte = idc.get_operand_value(prev_p, 1)
        bytes.append(byte)
        prev_p = prev_head(prev_p, minea=0)
    bytes.reverse()
    if(len(bytes) == 0): continue
    if(bytes[0] == 0 ): del bytes[0]
    decoded = decode_string(bytes)
    print(decoded)
    comment(addr_call, str(decoded))
    print("..............................")
